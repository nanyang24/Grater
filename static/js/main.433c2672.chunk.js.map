{"version":3,"sources":["editor.js","img/github.svg","App.js","index.js"],"names":["defaultOptions","minimap","enabled","Editor","code","handleChange","language","options","className","useResizeDetector","width","height","ref","editorInstance","useRef","value","quickSuggestions","readOnly","onChange","newValue","e","editorDidMount","editor","monaco","current","focus","then","data","defineTheme","setTheme","App","useState","source","setSource","target","setTarget","error","setError","useEffect","existingString","window","localStorage","getItem","r","parseScript","formatString","JSON","stringify","setItem","message","href","src","GithubIcon","alt","ReactDOM","render","document","getElementById"],"mappings":"4PAIMA,EAAiB,CACrBC,QAAS,CACPC,SAAS,IAIE,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,SAGC,IAFDC,eAEC,MAFS,GAET,MADDC,iBACC,MADW,GACX,IAC8BC,cAAvBC,EADP,EACOA,MAAOC,EADd,EACcA,OAAQC,EADtB,EACsBA,IAEjBC,EAAiBC,mBAmBvB,OACE,qBAAKN,UAAS,yBAAoBA,GAAaI,IAAKA,EAApD,SACE,cAAC,IAAD,CACEF,MAAOA,EACPC,OAAQA,EACRL,SAAUA,GAAY,aACtBS,MAAOX,GAAQ,GACfY,kBAAkB,EAClBT,QAAO,uCACFP,GACA,CACDiB,UAAWZ,IAEVE,GAELW,SAhCW,SAACC,EAAUC,GAC1Bf,EAAac,IAgCTE,eA7BiB,SAACC,EAAQC,GAC9BV,EAAeW,QAAUF,EAErBjB,GACFiB,EAAOG,QAGT,mCAAmDC,MAAK,SAACC,GACvDJ,EAAOD,OAAOM,YAAY,UAAWD,GACrCJ,EAAOD,OAAOO,SAAS,mB,aClCd,MAA0B,mC,OCmE1BC,MA5Df,WAAgB,IAAD,EACeC,mBAAS,6BADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KA6Bb,OApBAC,qBAAU,WACR,IAAMC,EAAiBC,OAAOC,aAAaC,QAAQ,iBAE/CH,GACFN,EAAUM,KAEX,IAEHD,qBAAU,WACR,IACE,IAAMK,EAAIC,YAAYZ,GAChBa,EAAeC,KAAKC,UAAUJ,EAAG,KAAM,GAC7CR,EAAUU,GAhBY9B,EAiBLiB,EAhBnBQ,OAAOC,aAAaO,QAAQ,gBAAiBjC,GAiB3CsB,EAAS,IACT,MAAOjB,GACPiB,EAASjB,EAAE6B,SApBU,IAAClC,IAsBvB,CAACiB,IAGF,sBAAKxB,UAAU,MAAf,UACE,mCACE,qBAAKA,UAAW,QAAhB,oBACA,qBAAKA,UAAW,OAAhB,kCACA,qBAAKA,UAAW,OAAhB,SACE,mBAAG0C,KAAK,sCAAsChB,OAAO,UAArD,SACE,qBAAKiB,IAAKC,EAAYC,IAAI,sBAIhC,sBAAK7C,UAAU,cAAf,UACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAW,gBAAhB,yBACA,cAACL,EAAD,CAAQC,KAAM4B,EAAQ3B,aAAc,SAACU,GAAD,OAAWkB,EAAUlB,SAE3D,sBAAKP,UAAU,eAAf,UACE,qBAAKA,UAAW,gBAAhB,wBACA,cAACL,EAAD,CACEK,UAAU,aACVJ,KAAMgC,EAAQ,GAAKF,EACnB5B,SAAS,cAIV8B,GAAS,qBAAK5B,UAAU,cAAf,SAA8B4B,WCxDlDkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.433c2672.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport { useResizeDetector } from 'react-resize-detector';\n\nconst defaultOptions = {\n  minimap: {\n    enabled: false,\n  },\n};\n\nexport default function Editor({\n  code,\n  handleChange,\n  language,\n  options = {},\n  className = '',\n}) {\n  const { width, height, ref } = useResizeDetector();\n\n  const editorInstance = useRef();\n\n  const onChange = (newValue, e) => {\n    handleChange(newValue);\n  };\n\n  const editorDidMount = (editor, monaco) => {\n    editorInstance.current = editor;\n\n    if (handleChange) {\n      editor.focus();\n    }\n\n    import('monaco-themes/themes/Solarized-dark.json').then((data) => {\n      monaco.editor.defineTheme('monokai', data);\n      monaco.editor.setTheme('monokai');\n    });\n  };\n\n  return (\n    <div className={`editor-content ${className}`} ref={ref}>\n      <MonacoEditor\n        width={width}\n        height={height}\n        language={language || 'javascript'}\n        value={code || ''}\n        quickSuggestions={false}\n        options={{\n          ...defaultOptions,\n          ...{\n            readOnly: !handleChange,\n          },\n          ...options,\n        }}\n        onChange={onChange}\n        editorDidMount={editorDidMount}\n      />\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/github.15573607.svg\";","import React, { useState, useEffect } from 'react';\nimport Editor from './editor';\nimport { parseScript } from 'grater';\nimport GithubIcon from './img/github.svg';\n\nimport './style.scss';\n\nfunction App() {\n  const [source, setSource] = useState('// Type anything you want');\n  const [target, setTarget] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSetStorage = (value) => {\n    window.localStorage.setItem('grater-editor', value);\n  };\n\n  useEffect(() => {\n    const existingString = window.localStorage.getItem('grater-editor');\n\n    if (existingString) {\n      setSource(existingString);\n    }\n  }, []);\n\n  useEffect(() => {\n    try {\n      const r = parseScript(source);\n      const formatString = JSON.stringify(r, null, 2);\n      setTarget(formatString);\n      handleSetStorage(source);\n      setError('');\n    } catch (e) {\n      setError(e.message);\n    }\n  }, [source]);\n\n  return (\n    <div className='app'>\n      <header>\n        <div className={'title'}>Grater</div>\n        <div className={'desc'}>An ECMAScript Parser</div>\n        <div className={'icon'}>\n          <a href='https://github.com/nanyang24/Grater' target='__blank'>\n            <img src={GithubIcon} alt='GithubIcon' />\n          </a>\n        </div>\n      </header>\n      <div className='editor-wrap'>\n        <div className='editor-panel'>\n          <div className={'editor-header'}>Source Code</div>\n          <Editor code={source} handleChange={(value) => setSource(value)} />\n        </div>\n        <div className='editor-panel'>\n          <div className={'editor-header'}>AST Output</div>\n          <Editor\n            className='ast-result'\n            code={error ? '' : target}\n            language='json'\n          />\n        </div>\n\n        {!!error && <div className='parse-error'>{error}</div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}