{"version":3,"sources":["editor.js","App.js","index.js"],"names":["defaultOptions","minimap","enabled","Editor","code","handleChange","language","options","className","useResizeDetector","width","height","ref","editorInstance","useRef","value","quickSuggestions","readOnly","onChange","newValue","e","editorDidMount","editor","current","App","useState","source","setSource","target","setTarget","error","setError","useEffect","r","parseScript","JSON","stringify","message","ReactDOM","render","document","getElementById"],"mappings":"4PAIMA,EAAiB,CACrBC,QAAS,CACPC,SAAS,IAIE,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,SAGC,IAFDC,eAEC,MAFS,GAET,MADDC,iBACC,MADW,GACX,IAC8BC,cAAvBC,EADP,EACOA,MAAOC,EADd,EACcA,OAAQC,EADtB,EACsBA,IAEjBC,EAAiBC,mBAUvB,OACE,qBAAKN,UAAS,yBAAoBA,GAAaI,IAAKA,EAApD,SACE,cAAC,IAAD,CACEF,MAAOA,EACPC,OAAQA,EACRL,SAAUA,GAAY,aACtBS,MAAOX,GAAQ,GACfY,kBAAkB,EAClBT,QAAO,uCACFP,GACA,CACDiB,UAAWZ,IAEVE,GAELW,SAvBW,SAACC,EAAUC,GAC1Bf,EAAac,IAuBTE,eApBiB,SAACC,GACtBT,EAAeU,QAAUD,O,oBCMdE,MA1Bf,WAAgB,IAAD,EACeC,mBAAS,6BADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAeb,OAVAC,qBAAU,WACR,IACE,IAAMC,EAAIC,YAAYR,GACtBG,EAAUM,KAAKC,UAAUH,EAAG,KAAM,IAClCF,EAAS,IACT,MAAOX,GACPW,EAASX,EAAEiB,YAEZ,CAACX,IAGF,qBAAKlB,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,cAACL,EAAD,CAAQC,KAAMsB,EAAQrB,aAAc,SAACU,GAAD,OAAWY,EAAUZ,MACzD,cAACZ,EAAD,CAAQK,UAAU,aAAaJ,KAAM0B,EAAQ,GAAKF,EAAQtB,SAAS,WAChEwB,GAAS,qBAAKtB,UAAU,cAAf,SAA8BsB,UCrBlDQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a2ec65ba.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\nimport { useResizeDetector } from 'react-resize-detector';\n\nconst defaultOptions = {\n  minimap: {\n    enabled: false,\n  },\n};\n\nexport default function Editor({\n  code,\n  handleChange,\n  language,\n  options = {},\n  className = '',\n}) {\n  const { width, height, ref } = useResizeDetector();\n\n  const editorInstance = useRef();\n\n  const onChange = (newValue, e) => {\n    handleChange(newValue);\n  };\n\n  const editorDidMount = (editor) => {\n    editorInstance.current = editor;\n  };\n\n  return (\n    <div className={`editor-content ${className}`} ref={ref}>\n      <MonacoEditor\n        width={width}\n        height={height}\n        language={language || 'javascript'}\n        value={code || ''}\n        quickSuggestions={false}\n        options={{\n          ...defaultOptions,\n          ...{\n            readOnly: !handleChange,\n          },\n          ...options,\n        }}\n        onChange={onChange}\n        editorDidMount={editorDidMount}\n      />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Editor from './editor';\nimport { parseScript } from 'grater';\n\nimport './style.scss';\n\nfunction App() {\n  const [source, setSource] = useState('// Type anything you want');\n  const [target, setTarget] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    try {\n      const r = parseScript(source);\n      setTarget(JSON.stringify(r, null, 2));\n      setError('');\n    } catch (e) {\n      setError(e.message);\n    }\n  }, [source]);\n\n  return (\n    <div className='app'>\n      <div className='editor-wrap'>\n        <Editor code={source} handleChange={(value) => setSource(value)} />\n        <Editor className='ast-result' code={error ? '' : target} language='json' />\n        {!!error && <div className='parse-error'>{error}</div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}